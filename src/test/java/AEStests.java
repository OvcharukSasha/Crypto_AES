import AES_crypto.AES;
import help.Utils;
import org.junit.Before;
import org.junit.Test;

import static help.Utils.printMatrix;
import static org.junit.Assert.assertEquals;

public class AEStests {
    private static AES aesCrypto;

    public AEStests() {
    }

    @Before
    public void setup() {
        aesCrypto = new AES();
    }


    @Test
    public void testSubBytes() {
        int[][] initialState = {
                {0x19, 0xa0, 0x9a, 0xe9},
                {0x3d, 0xf4, 0xc6, 0xf8},
                {0xe3, 0xe2, 0x8d, 0x48},
                {0xbe, 0x2b, 0x2a, 0x08}};
        int[][] afterMethod = {
                {0xd4, 0xe0, 0xb8, 0x1e},
                {0x27, 0xbf, 0xb4, 0x41},
                {0x11, 0x98, 0x5d, 0x52},
                {0xae, 0xf1, 0xe5, 0x30}};

        assertEquals(afterMethod, aesCrypto.subBytes(initialState));
    }

    @Test
    public void testInvSubBytes() {
        int[][] initialState = {
                {0x7a, 0x89, 0x2b, 0x3d},
                {0x9f, 0xd5, 0xef, 0xca},
                {0x10, 0xf5, 0xfd, 0x4e},
                {0x27, 0x0b, 0x9f, 0xa7}};

        int[][] afterMethod = {
                {0xbd, 0xf2, 0x0b, 0x8b},
                {0x6e, 0xb5, 0x61, 0x10},
                {0x7c, 0x77, 0x21, 0xb6},
                {0x3d, 0x9e, 0x6e, 0x89}};

        assertEquals(afterMethod, aesCrypto.invSubBytes(initialState));
    }


    @Test
    public void testShiftRows() {
        int[][] beforeState = {
                {0xd4, 0xe0, 0xb8, 0x1e},
                {0x27, 0xbf, 0xb4, 0x41},
                {0x11, 0x98, 0x5d, 0x52},
                {0xae, 0xf1, 0xe5, 0x30}};

        int[][] afterState = {
                {0xd4, 0xe0, 0xb8, 0x1e},
                {0xbf, 0xb4, 0x41, 0x27},
                {0x5d, 0x52, 0x11, 0x98},
                {0x30, 0xae, 0xf1, 0xe5}};

        assertEquals(afterState, aesCrypto.ShiftRows(beforeState));

    }

    @Test
    public void testInvShiftRows() {
        int[][] beforeState = {
                {0x7a, 0x89, 0x2b, 0x3d},
                {0xd5, 0xef, 0xca, 0x9f},
                {0xfd, 0x4e, 0x10, 0xf5},
                {0xa7, 0x27, 0x0b, 0x9f}};

        int[][] afterState = {
                {0x7a, 0x89, 0x2b, 0x3d},
                {0x9f, 0xd5, 0xef, 0xca},
                {0x10, 0xf5, 0xfd, 0x4e},
                {0x27, 0x0b, 0x9f, 0xa7}};

        assertEquals(afterState, aesCrypto.InvShiftRows(beforeState));

    }

    @Test
    public void testMixColumns() {
        int[][] beforeState = {
                {0xd4, 0xe0, 0xb8, 0x1e},
                {0xbf, 0xb4, 0x41, 0x27},
                {0x5d, 0x52, 0x11, 0x98},
                {0x30, 0xae, 0xf1, 0xe5}};

        int[][] afterState = {
                {0x04, 0xe0, 0x48, 0x28},
                {0x66, 0xcb, 0xf8, 0x06},
                {0x81, 0x19, 0xd3, 0x26},
                {0xe5, 0x9a, 0x7a, 0x4c}};

        assertEquals(afterState, aesCrypto.MixColumns(beforeState));

    }

    @Test
    public void testInvMixColumns() {
        int[][] beforeState = {
                {0xbd, 0xf2, 0x0b, 0x8b},
                {0x6e, 0xb5, 0x61, 0x10},
                {0x7c, 0x77, 0x21, 0xb6},
                {0x3d, 0x9e, 0x6e, 0x89}};

        int[][] afterState = {
                {0x47, 0xf7, 0x61, 0xa1},
                {0x73, 0x2f, 0xcb, 0xe6},
                {0xb9, 0x35, 0x01, 0xcf},
                {0x1f, 0x43, 0x8e, 0x2c}};

        int[][] inv = aesCrypto.InvMixColumns(beforeState);
        assertEquals(afterState, inv);

    }


    @Test
    public void testAddRoundKey() {
        int[][] beforeState = {
                {0x04, 0xe0, 0x48, 0x28},
                {0x66, 0xcb, 0xf8, 0x06},
                {0x81, 0x19, 0xd3, 0x26},
                {0xe5, 0x9a, 0x7a, 0x4c}};

        int[][] keyMatrix = {
                {0xa0, 0x88, 0x23, 0x2a},
                {0xfa, 0x54, 0xa3, 0x6c},
                {0xfe, 0x2c, 0x39, 0x76},
                {0x17, 0xb1, 0x39, 0x05}};

        int[][] afterState = {
                {0xa4, 0x68, 0x6b, 0x02},
                {0x9c, 0x9f, 0x5b, 0x6a},
                {0x7f, 0x35, 0xea, 0x50},
                {0xf2, 0x2b, 0x43, 0x49}};

        assertEquals(afterState, aesCrypto.AddRoundKey(beforeState, keyMatrix));

    }

    @Test
    public void testAES() {
        {
            AES Aes128 = new AES(128);
            String key = "Thats my Kung Fu";
            String plainText = "Two One Nine Two";
            assertEquals("29 57 40 1a c3 14 22 2 50 20 99 d7 5f f6 b3 3a", Aes128.encrypt(Utils.splitBy128Bits(plainText.getBytes()), key).trim());

        }
    }

    @Test
    public void testDoEncryption128() {
        // test data: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf
        AES aes128 = new AES(128);
        int[][] initialMatrix = {
                {0x32, 0x88, 0x31, 0xe0},
                {0x43, 0x5a, 0x31, 0x37},
                {0xf6, 0x30, 0x98, 0x07},
                {0xa8, 0x8d, 0xa2, 0x34}};

        int[][] initialKey = {
                {0x2b, 0x28, 0xab, 0x09},
                {0x7e, 0xae, 0xf7, 0xcf},
                {0x15, 0xd2, 0x15, 0x4f},
                {0x16, 0xa6, 0x88, 0x3c}};

        printMatrix(initialMatrix);
        int[][] cryptedMatrix = {
                {0x39, 0x02, 0xdc, 0x19},
                {0x25, 0xdc, 0x11, 0x6a},
                {0x84, 0x09, 0x85, 0x0b},
                {0x1d, 0xfb, 0x97, 0x32}};
        assertEquals(cryptedMatrix, aes128.DoEncryption(initialMatrix, initialKey));

    }


    @Test
    public void testDoEncryption192() {
        // test data: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf

        AES aes192 = new AES(192);
        int[][] initialMatrix = {
                {0x0, 0x44, 0x88, 0xcc},
                {0x11, 0x55, 0x99, 0xdd},
                {0x22, 0x66, 0xaa, 0xee},
                {0x33, 0x77, 0xbb, 0xff}};

        int[][] initialKey = {
                {0x00, 0x04, 0x08, 0x0c, 0x10, 0x14},
                {0x01, 0x05, 0x09, 0x0d, 0x11, 0x15},
                {0x02, 0x06, 0x0a, 0x0e, 0x12, 0x16},
                {0x03, 0x07, 0x0b, 0x0f, 0x13, 0x17}};

        int[][] cryptedMatrix = {
                {0xdd, 0x86, 0x6e, 0xec},
                {0xa9, 0x4c, 0xaf, 0x0d},
                {0x7c, 0xdf, 0x70, 0x71},
                {0xa4, 0xe0, 0xa0, 0x91}};
        assertEquals(cryptedMatrix, aes192.DoEncryption(initialMatrix, initialKey));

    }


    @Test
    public void testDoEncryption256() {
        // test data: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf
        AES aes256 = new AES(256);
        int[][] initialMatrix = {
                {0x0, 0x44, 0x88, 0xcc},
                {0x11, 0x55, 0x99, 0xdd},
                {0x22, 0x66, 0xaa, 0xee},
                {0x33, 0x77, 0xbb, 0xff}};

        int[][] initialKey = {
                {0x00, 0x04, 0x08, 0x0c, 0x10, 0x14, 0x18, 0x1c},
                {0x01, 0x05, 0x09, 0x0d, 0x11, 0x15, 0x19, 0x1d},
                {0x02, 0x06, 0x0a, 0x0e, 0x12, 0x16, 0x1a, 0x1e},
                {0x03, 0x07, 0x0b, 0x0f, 0x13, 0x17, 0x1b, 0x1f}};

        int[][] cryptedMatrix = {
                {0x8e, 0x51, 0xea, 0x4b},
                {0xa2, 0x67, 0xfc, 0x49},
                {0xb7, 0x45, 0x49, 0x60},
                {0xca, 0xbf, 0x90, 0x89}};

        assertEquals(cryptedMatrix, aes256.DoEncryption(initialMatrix, initialKey));

    }

    @Test
    public void testDoDecryption128() {
        // test data: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf
        AES aes128 = new AES(128);
        int[][] cryptedMatrix = {
                {0x69, 0x6a, 0xd8, 0x70},
                {0xc4, 0x7b, 0xcd, 0xb4},
                {0xe0, 0x04, 0xb7, 0xc5},
                {0xd8, 0x30, 0x80, 0x5a}};

        int[][] initialKey = {
                {0x00, 0x04, 0x08, 0x0c},
                {0x01, 0x05, 0x09, 0x0d},
                {0x02, 0x06, 0x0a, 0x0e},
                {0x03, 0x07, 0x0b, 0x0f}};

        int[][] decryptedMatrix = {
                {0x0, 0x44, 0x88, 0xcc},
                {0x11, 0x55, 0x99, 0xdd},
                {0x22, 0x66, 0xaa, 0xee},
                {0x33, 0x77, 0xbb, 0xff}};
        assertEquals(decryptedMatrix, aes128.DoDecryption(cryptedMatrix, initialKey));

    }

    @Test
    public void testDoDecryption192() {
        // test data: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf
        AES aes192 = new AES(192);

        int[][] cryptedMatrix = {
                {0xdd, 0x86, 0x6e, 0xec},
                {0xa9, 0x4c, 0xaf, 0x0d},
                {0x7c, 0xdf, 0x70, 0x71},
                {0xa4, 0xe0, 0xa0, 0x91}};

        int[][] initialKey = {
                {0x00, 0x04, 0x08, 0x0c, 0x10, 0x14},
                {0x01, 0x05, 0x09, 0x0d, 0x11, 0x15},
                {0x02, 0x06, 0x0a, 0x0e, 0x12, 0x16},
                {0x03, 0x07, 0x0b, 0x0f, 0x13, 0x17}};

        int[][] decryptedMatrix = {
                {0x0, 0x44, 0x88, 0xcc},
                {0x11, 0x55, 0x99, 0xdd},
                {0x22, 0x66, 0xaa, 0xee},
                {0x33, 0x77, 0xbb, 0xff}};

        assertEquals(decryptedMatrix, aes192.DoDecryption(cryptedMatrix, initialKey));

    }

    @Test
    public void testDoDecryption256() {
        // test data: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf
        AES aes256 = new AES(256);

        int[][] cryptedMatrix = {
                {0x8e, 0x51, 0xea, 0x4b},
                {0xa2, 0x67, 0xfc, 0x49},
                {0xb7, 0x45, 0x49, 0x60},
                {0xca, 0xbf, 0x90, 0x89}};

        int[][] initialKey = {
                {0x00, 0x04, 0x08, 0x0c, 0x10, 0x14, 0x18, 0x1c},
                {0x01, 0x05, 0x09, 0x0d, 0x11, 0x15, 0x19, 0x1d},
                {0x02, 0x06, 0x0a, 0x0e, 0x12, 0x16, 0x1a, 0x1e},
                {0x03, 0x07, 0x0b, 0x0f, 0x13, 0x17, 0x1b, 0x1f}};

        int[][] decryptedMatrix = {
                {0x0, 0x44, 0x88, 0xcc},
                {0x11, 0x55, 0x99, 0xdd},
                {0x22, 0x66, 0xaa, 0xee},
                {0x33, 0x77, 0xbb, 0xff}};

        assertEquals(decryptedMatrix, aes256.DoDecryption(cryptedMatrix, initialKey));

    }

}
